generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(uuid())
  email              String          @unique
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  name               String
  emailVerified      Boolean         @default(false)
  image              String?
  phone              String?         @unique
  curentPlan         String?
  renewAt            DateTime?
  subscriptionId     String?
  subscriptionStatus String?
  trial              Boolean?        @default(true)
  mercagoPagoUserId  String?
  accountWallets     AccountWallet[]
  categories         Category[]
  creditsCard        CreditCard[]
  fixedBill          FixedBill[]
  bills              Bill[]
  notifications      Notification[]
  plans              Plans[]
  transactions       Transactions[]
  accounts           Account[]
  sessions           Session[]
  reminders          Reminder[]

  @@map("user")
}

model Category {
  id                 String              @id @default(dbgenerated("gen_random_uuid()"))
  name               String
  type               CategoryType
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userId             String
  color              String
  icon               String
  amountLimit        Float?
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  creditCardExpenses CreditCardExpense[]
  fixedBill          FixedBill[]
  transactions       Transactions[]
}

model AccountWallet {
  id                String         @id @default(uuid())
  name              String
  balance           Float          @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  userId            String
  image             String
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transactions[]
  incomingTransfers Transactions[] @relation("DestinationWallet")
}

model CreditCard {
  id                 String              @id @default(ulid())
  name               String
  limit              Float
  closingDay         Int
  dueDay             Int
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  userId             String
  image              String
  availableLimit     Float
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  creditCardExpenses CreditCardExpense[]
}

model CreditCardExpense {
  id                String     @id @default(uuid())
  amount            Float
  description       String
  date              DateTime
  installment       Int?
  totalInstallments Int?
  categoryId        String?
  creditCardId      String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  category          Category?  @relation(fields: [categoryId], references: [id])
  creditCard        CreditCard @relation(fields: [creditCardId], references: [id], onDelete: Cascade)

  @@index([creditCardId])
}

model Transactions {
  id                String         @id @default(dbgenerated("gen_random_uuid()"))
  amount            Float
  description       String
  date              DateTime
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  categoryId        String?
  userId            String
  type              CategoryType
  accountWalletId   String
  toAccountWalletId String?
  accountWallet     AccountWallet  @relation(fields: [accountWalletId], references: [id], onDelete: Cascade)
  category          Category?      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  toAccountWallet   AccountWallet? @relation("DestinationWallet", fields: [toAccountWalletId], references: [id])
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([accountWalletId])
  @@index([toAccountWalletId])
}

model Plans {
  id                 String                @id @default(uuid())
  title              String
  description        String
  target_value       Float
  iniital_value      Float
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  userId             String
  user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  plansContributions Plans_contributions[]
}

model Plans_contributions {
  id        String   @id @default(uuid())
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  planId    String
  plan      Plans    @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  read      Boolean  @default(false)
  created   DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

/// contas fixas
model FixedBill {
  id         String    @id @default(uuid())
  title      String
  amount     Float
  dueDay     Int
  categoryId String?
  userId     String
  active     Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  bills      Bill[]
  category   Category? @relation(fields: [categoryId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bill {
  id            String     @id @default(uuid())
  fixedBillId   String?
  dueDate       DateTime
  amount        Float
  paid          Boolean    @default(false)
  paidAt        DateTime?
  transactionId String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  description   String
  userId        String
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  fixedBill     FixedBill? @relation(fields: [fixedBillId], references: [id], onDelete: Cascade)
}

model Reminder {
  id          String         @id @default(dbgenerated("gen_random_uuid()"))
  description String
  date_hour   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sent        Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum CategoryType {
  INCOME
  EXPENSE
  TRANSFER
}
